/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type JBFundAccessConstraintsStruct = {
  terminal: string;
  token: string;
  distributionLimit: BigNumberish;
  distributionLimitCurrency: BigNumberish;
  overflowAllowance: BigNumberish;
  overflowAllowanceCurrency: BigNumberish;
};

export type JBFundAccessConstraintsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  terminal: string;
  token: string;
  distributionLimit: BigNumber;
  distributionLimitCurrency: BigNumber;
  overflowAllowance: BigNumber;
  overflowAllowanceCurrency: BigNumber;
};

export interface JBFundAccessConstraintsStoreInterface extends utils.Interface {
  functions: {
    "directory()": FunctionFragment;
    "distributionLimitOf(uint256,uint256,address,address)": FunctionFragment;
    "overflowAllowanceOf(uint256,uint256,address,address)": FunctionFragment;
    "setFor(uint256,uint256,(address,address,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "directory"
      | "distributionLimitOf"
      | "overflowAllowanceOf"
      | "setFor"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributionLimitOf",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "overflowAllowanceOf",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFor",
    values: [BigNumberish, BigNumberish, JBFundAccessConstraintsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionLimitOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overflowAllowanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "SetFundAccessConstraints(uint256,uint256,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetFundAccessConstraints"): EventFragment;
}

export interface SetFundAccessConstraintsEventObject {
  fundingCycleConfiguration: BigNumber;
  projectId: BigNumber;
  constraints: JBFundAccessConstraintsStructOutput;
  caller: string;
}
export type SetFundAccessConstraintsEvent = TypedEvent<
  [BigNumber, BigNumber, JBFundAccessConstraintsStructOutput, string],
  SetFundAccessConstraintsEventObject
>;

export type SetFundAccessConstraintsEventFilter =
  TypedEventFilter<SetFundAccessConstraintsEvent>;

export interface JBFundAccessConstraintsStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBFundAccessConstraintsStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.
     * @param _configuration The configuration during which the distribution limit applies.
     * @param _projectId The ID of the project to get the distribution limit of.
     * @param _terminal The terminal from which distributions are being limited.
     * @param _token The token for which the distribution limit applies.
     */
    distributionLimitOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.
     * @param _configuration The configuration of the during which the allowance applies.
     * @param _projectId The ID of the project to get the overflow allowance of.
     * @param _terminal The terminal managing the overflow.
     * @param _token The token for which the overflow allowance applies.
     */
    overflowAllowanceOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setFor(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   *  The directory of terminals and controllers for projects.
   */
  directory(overrides?: CallOverrides): Promise<string>;

  /**
   * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
   * The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.
   * @param _configuration The configuration during which the distribution limit applies.
   * @param _projectId The ID of the project to get the distribution limit of.
   * @param _terminal The terminal from which distributions are being limited.
   * @param _token The token for which the distribution limit applies.
   */
  distributionLimitOf(
    _projectId: BigNumberish,
    _configuration: BigNumberish,
    _terminal: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  /**
   * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
   * The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.
   * @param _configuration The configuration of the during which the allowance applies.
   * @param _projectId The ID of the project to get the overflow allowance of.
   * @param _terminal The terminal managing the overflow.
   * @param _token The token for which the overflow allowance applies.
   */
  overflowAllowanceOf(
    _projectId: BigNumberish,
    _configuration: BigNumberish,
    _terminal: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  setFor(
    _projectId: BigNumberish,
    _configuration: BigNumberish,
    _fundAccessConstraints: JBFundAccessConstraintsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<string>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.
     * @param _configuration The configuration during which the distribution limit applies.
     * @param _projectId The ID of the project to get the distribution limit of.
     * @param _terminal The terminal from which distributions are being limited.
     * @param _token The token for which the distribution limit applies.
     */
    distributionLimitOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.
     * @param _configuration The configuration of the during which the allowance applies.
     * @param _projectId The ID of the project to get the overflow allowance of.
     * @param _terminal The terminal managing the overflow.
     * @param _token The token for which the overflow allowance applies.
     */
    overflowAllowanceOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setFor(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SetFundAccessConstraints(uint256,uint256,tuple,address)"(
      fundingCycleConfiguration?: BigNumberish | null,
      projectId?: BigNumberish | null,
      constraints?: null,
      caller?: null
    ): SetFundAccessConstraintsEventFilter;
    SetFundAccessConstraints(
      fundingCycleConfiguration?: BigNumberish | null,
      projectId?: BigNumberish | null,
      constraints?: null,
      caller?: null
    ): SetFundAccessConstraintsEventFilter;
  };

  estimateGas: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.
     * @param _configuration The configuration during which the distribution limit applies.
     * @param _projectId The ID of the project to get the distribution limit of.
     * @param _terminal The terminal from which distributions are being limited.
     * @param _token The token for which the distribution limit applies.
     */
    distributionLimitOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.
     * @param _configuration The configuration of the during which the allowance applies.
     * @param _projectId The ID of the project to get the overflow allowance of.
     * @param _terminal The terminal managing the overflow.
     * @param _token The token for which the overflow allowance applies.
     */
    overflowAllowanceOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFor(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of token that a project can distribute per funding cycle, and the currency it's in terms of.
     * @param _configuration The configuration during which the distribution limit applies.
     * @param _projectId The ID of the project to get the distribution limit of.
     * @param _terminal The terminal from which distributions are being limited.
     * @param _token The token for which the distribution limit applies.
     */
    distributionLimitOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The number of decimals in the returned fixed point amount is the same as that of the specified terminal.
     * The amount of overflow that a project is allowed to tap into on-demand throughout a configuration, and the currency it's in terms of.
     * @param _configuration The configuration of the during which the allowance applies.
     * @param _projectId The ID of the project to get the overflow allowance of.
     * @param _terminal The terminal managing the overflow.
     * @param _token The token for which the overflow allowance applies.
     */
    overflowAllowanceOf(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _terminal: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFor(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      _fundAccessConstraints: JBFundAccessConstraintsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
