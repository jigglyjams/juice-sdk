/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface JBMigrationOperatorInterface extends utils.Interface {
  functions: {
    "directory()": FunctionFragment;
    "migrate(uint256,address,address,address)": FunctionFragment;
    "projects()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "directory" | "migrate" | "projects"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;

  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;

  events: {};
}

export interface JBMigrationOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBMigrationOperatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * directory instance which keeps a track of which controller is linked to which project.
     */
    directory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows project owners to migrate the controller & terminal linked to their project to the latest version
     * @param _newController Controller 3.1 address to migrate to.
     * @param _newJbTerminal Terminal 3.1 address to migrate to.
     * @param _oldJbTerminal Old terminal address to migrate from.
     * @param _projectId The project id whose controller & terminal are to be migrated
     */
    migrate(
      _projectId: BigNumberish,
      _newController: string,
      _newJbTerminal: string,
      _oldJbTerminal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The NFT granting ownership to a Juicebox project
     */
    projects(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * directory instance which keeps a track of which controller is linked to which project.
   */
  directory(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows project owners to migrate the controller & terminal linked to their project to the latest version
   * @param _newController Controller 3.1 address to migrate to.
   * @param _newJbTerminal Terminal 3.1 address to migrate to.
   * @param _oldJbTerminal Old terminal address to migrate from.
   * @param _projectId The project id whose controller & terminal are to be migrated
   */
  migrate(
    _projectId: BigNumberish,
    _newController: string,
    _newJbTerminal: string,
    _oldJbTerminal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The NFT granting ownership to a Juicebox project
   */
  projects(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * directory instance which keeps a track of which controller is linked to which project.
     */
    directory(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows project owners to migrate the controller & terminal linked to their project to the latest version
     * @param _newController Controller 3.1 address to migrate to.
     * @param _newJbTerminal Terminal 3.1 address to migrate to.
     * @param _oldJbTerminal Old terminal address to migrate from.
     * @param _projectId The project id whose controller & terminal are to be migrated
     */
    migrate(
      _projectId: BigNumberish,
      _newController: string,
      _newJbTerminal: string,
      _oldJbTerminal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The NFT granting ownership to a Juicebox project
     */
    projects(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * directory instance which keeps a track of which controller is linked to which project.
     */
    directory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows project owners to migrate the controller & terminal linked to their project to the latest version
     * @param _newController Controller 3.1 address to migrate to.
     * @param _newJbTerminal Terminal 3.1 address to migrate to.
     * @param _oldJbTerminal Old terminal address to migrate from.
     * @param _projectId The project id whose controller & terminal are to be migrated
     */
    migrate(
      _projectId: BigNumberish,
      _newController: string,
      _newJbTerminal: string,
      _oldJbTerminal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The NFT granting ownership to a Juicebox project
     */
    projects(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * directory instance which keeps a track of which controller is linked to which project.
     */
    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows project owners to migrate the controller & terminal linked to their project to the latest version
     * @param _newController Controller 3.1 address to migrate to.
     * @param _newJbTerminal Terminal 3.1 address to migrate to.
     * @param _oldJbTerminal Old terminal address to migrate from.
     * @param _projectId The project id whose controller & terminal are to be migrated
     */
    migrate(
      _projectId: BigNumberish,
      _newController: string,
      _newJbTerminal: string,
      _oldJbTerminal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The NFT granting ownership to a Juicebox project
     */
    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
